left = "DENSITY for all",
right = "")
multid1AN
multid1_b = ggarrange(a1A,a1B,ncol = 1,nrow = 2)
multid1AN = annotate_figure(multid1_b,
top = text_grob("Student Teacher Ratio",
face = "bold", size = 14),
bottom = text_grob("Data source: EDUWA",
hjust = 1, x = 1,
face = "italic",
size = 10),
left = "DENSITY for all",
right = "")
multid1_b = ggarrange(a1A,a1B,ncol = 1,nrow = 2)
multid1_b
a1A <-ggplot(aboves1,aes(y = Reduced.Lunch, x = factor(0)))  +
geom_boxplot(width = .6) +
labs(title = 'aboves') +
stat_summary(geom="text", fun.y=quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=-0.33), size=3) +
coord_flip()
library(ggpubr)
a1B <- ggplot(aboves1,aes(Reduced.Lunch))  +
geom_histogram(binwidth = 20, fill = "blue") +
labs(title = 'aboves',y=NULL)
multid1_b = ggarrange(a1A,a1B,ncol = 1,nrow = 2)
multid1_b
multid1AN = annotate_figure(multid1_b,
top = text_grob("Student Teacher Ratio",
face = "bold", size = 14),
bottom = text_grob("Data source: EDUWA",
hjust = 1, x = 1,
face = "italic",
size = 10),
left = "DENSITY for all",
right = "")
multid1AN
a1B <- ggplot(aboves1,aes(Reduced.Lunch))  +
geom_histogram(binwidth = 10, fill = "blue") +
labs(title = 'aboves',y=NULL)
a1B''
a1B
multi = ggarrange(a1A,a1B,ncol = 1,nrow = 2)
multi1 = annotate_figure(multid1_b,
top = text_grob("Student Teacher Ratio",
face = "bold", size = 14),
bottom = text_grob("Data source: EDUWA",
hjust = 1, x = 1,
face = "italic",
size = 10),
left = "DENSITY for all",
right = "")
multi1 = annotate_figure(multi,
top = text_grob("Student Teacher Ratio",
face = "bold", size = 14),
bottom = text_grob("Data source: EDUWA",
hjust = 1, x = 1,
face = "italic",
size = 10),
left = "DENSITY for all",
right = "")
multi1
multi1 = annotate_figure(multi,
top = text_grob("Reduced Lunch",
face = "bold", size = 14),
bottom = text_grob("Data source: EDUWA",
hjust = 1, x = 1,
face = "italic",
size = 10),
left = "",
right = "")
multi1
install.packages(c("FSA", "Rmisc"))
## ----collect, eval=TRUE--------------------------------------------------
# collecting the data
link="https://github.com/EvansDataScience/data/raw/master/crime.RData"
load(file = url(link))
## ----names, eval=TRUE----------------------------------------------------
# variables in the data:
names(crime)
## ------------------------------------------------------------------------
# some stats:
summary(crime)
## ----summaryTime, eval=TRUE----------------------------------------------
# stats of days to report
# notice the spread of values.
summary(crime$DaysToReport)
## ----collect, eval=TRUE--------------------------------------------------
# collecting the data
link="https://github.com/EvansDataScience/data/raw/master/crime.RData"
load(file = url(link))
## ----collect, eval=TRUE--------------------------------------------------
# collecting the data
link="https://github.com/EvansDataScience/data/raw/master/crime.RData"
load(file = url(link))
## ----names, eval=TRUE----------------------------------------------------
# variables in the data:
names(crime)
## ------------------------------------------------------------------------
# some stats:
summary(crime)
## ----summaryTime, eval=TRUE----------------------------------------------
# stats of days to report
# notice the spread of values.
summary(crime$DaysToReport)
## ------------------------------------------------------------------------
# 'order' decreasing
library(magrittr) # for %>%
crime[order(-crime$DaysToReport),c('year','DaysToReport')]%>%head(20)
## ----aggregate, eval=TRUE------------------------------------------------
# non missing 'precint'
crime=crime[complete.cases(crime$Precinct),]
# summary: mean by groups
aggregate(data=crime, DaysToReport~Precinct,mean)
## ----boxNumCat1, eval=TRUE-----------------------------------------------
# boxplot of days to report per precint
library(ggplot2)
base=ggplot(data=crime,
aes(x=Precinct,y=DaysToReport))
base + geom_boxplot()
## ----tapplySummary, eval=TRUE--------------------------------------------
# aggregate using "summary" function
# Distribution of days to report?
aggregate(data=crime,DaysToReport~Precinct,summary)
## ----weeksandabove, eval=TRUE--------------------------------------------
# several boxplots, from week and above
library(ggpubr)
base7=ggplot(data=crime[crime$DaysToReport>=7,],
aes(x=Precinct,y=DaysToReport))
box7=base7 + geom_boxplot() + labs(title = "week and above")
base30=ggplot(data=crime[crime$DaysToReport>=30,],
aes(x=Precinct,y=DaysToReport))
box30=base30 + geom_boxplot() + labs(title = "month and above")
base180=ggplot(data=crime[crime$DaysToReport>=180,],
aes(x=Precinct,y=DaysToReport))
box180=base180 + geom_boxplot() + labs(title = "half year and above")
base365=ggplot(data=crime[crime$DaysToReport>=360,],
aes(x=Precinct,y=DaysToReport))
box365=base365 + geom_boxplot() + labs(title = "year and above")
#all in one:
ggarrange(box7,box30,box180,box365)
## ----casesCountYear, eval=TRUE-------------------------------------------
# check crimes per year to filter again
table(crime$year)
## ----crimeAfter2000, eval=TRUE-------------------------------------------
# let's keep durantion longer than a year,
# and after 2000
# new filtered data frame
crimeY2000=crime[crime$year>=2000 & crime$DaysToReport>=365,]
#counting
table(crimeY2000$Precinct)
## ----boxpAfter2000, eval=TRUE--------------------------------------------
# box plot for new filtered data frame:
base=ggplot(data=crimeY2000,
aes(x=Precinct,y=DaysToReport))
base + geom_boxplot()
## ----convertYear, eval=TRUE----------------------------------------------
# create new variable in YEARS:
crimeY2000$YearsToReport=crimeY2000$DaysToReport/365
# new box plot, only vertical units change
base=ggplot(data=crimeY2000,
aes(x=Precinct,y=YearsToReport))
base + geom_boxplot()
## ----exploreBOX2, eval=TRUE----------------------------------------------
#boxplot by Year
base=ggplot(data = crimeY2000,
aes(x=as.factor(year),
y=YearsToReport))
boxByYear=base + geom_boxplot()
#boxplot by Crime
base=ggplot(data =crimeY2000,
aes(x=reorder(crimecat,YearsToReport), # using reorder!
y=YearsToReport))
boxByCrime=base + geom_boxplot()
boxByCrime= boxByCrime + theme(axis.text.x = element_text(angle = 45,
hjust = 1,
size = 5))
# combining plots
ggarrange(boxByYear,boxByCrime,ncol = 1)
## ----boxBYE, eval=TRUE---------------------------------------------------
# plotting the MIN values:
base  = ggplot(crimeY2000,aes(x=factor(year), y=YearsToReport))
mins = base + stat_summary(fun.y=min, # function for 'y' is min()
geom="line",
size=2,
aes(group=1,col='Min'))
mins # just the min values
## ---- eval=TRUE----------------------------------------------------------
# plotting the MAX values on top:
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",
size=2,
aes(group=1,col='Max'))
minsMaxs
## ---- eval=TRUE----------------------------------------------------------
# another layer with MEDIANS
minsMaxsMd= minsMaxs + stat_summary(fun.y=median,
geom="line",
size=2,
aes(group=1,col='Median'))
minsMaxsMd
## ---- eval=TRUE----------------------------------------------------------
# Change color of lines:
all1=minsMaxsMd + scale_colour_manual(name="Stats",
values=c("black", "grey50","grey90") #alphabetic
)
all1 + theme_classic()
## ----crimeWeek, eval=TRUE------------------------------------------------
# data we did not use:
crimeLessYear2000=crime[(crime$DaysToReport<365) & (crime$year>=2000),]
## ----plotCrimeWeek, eval=TRUE--------------------------------------------
#plotting it as before:
base = ggplot(crimeLessYear2000,aes(x=factor(year), y=DaysToReport))
mins = base + stat_summary(fun.y=min,size=2,
geom="line",
aes(group=1,col='Min'))
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",size=2,
aes(group=1,col='Max'))
minsMaxsMd= minsMaxs + stat_summary(fun.y=median,
geom="line",size=2,
aes(group=1,col='Median'))
all2=minsMaxsMd + scale_colour_manual(name="Stats",
values=c("black", "grey50","grey90")
)
all2 + theme_classic()
## ----anova, eval=TRUE----------------------------------------------------
#checking the mean per factor value.
#are crime in precints different on average?
aggregate(data=crimeY2000,YearsToReport~Precinct, mean)
## ----CI, eval=TRUE-------------------------------------------------------
#are crime in precints different on average?
library(Rmisc)
group.CI(YearsToReport ~ Precinct,
data=crimeY2000,
ci = 0.95)
## ----plotCI, eval=TRUE---------------------------------------------------
#are crime in precints different on average?
# introducing ggpubr
library(ggpubr)
ggline(data=crimeY2000,x = "Precinct", y = "YearsToReport",
add = 'mean_ci')
## ----testAnova, eval=TRUE------------------------------------------------
# Compute the analysis of variance
res.aov <- aov(YearsToReport ~ Precinct, data = crimeY2000)
# Summary of the analysis
summary(res.aov)
## ----Tukey, eval=TRUE----------------------------------------------------
# where are the differences detected in aov?
TukeyHSD(res.aov)
## ----TukeyFiltered, eval=TRUE--------------------------------------------
# where are the differences detected in aov?
# result into a data frame
ResPar=as.data.frame(TukeyHSD(res.aov)$Precinct)
ResPar[ResPar$`p adj`<0.05,]
## ----kruskal, eval=TRUE--------------------------------------------------
# non parametric
kruskal.test(YearsToReport ~ Precinct, data = crimeY2000)
## ----dunn, eval=TRUE-----------------------------------------------------
# where are the differences detected in Kruskal?
library(FSA)
dunnTest(YearsToReport ~ Precinct, data = crimeY2000)
## ----dunnFiltered, eval=TRUE---------------------------------------------
# where are the differences detected in Kruskal?
# result into a data frame
ResNonPar=dunnTest(YearsToReport ~ Precinct, data = crimeY2000)$res
ResNonPar[ResNonPar$P.adj<0.05,]
## ----summaryTime, eval=TRUE----------------------------------------------
# stats of days to report
# notice the spread of values.
summary(crime$DaysToReport)
library(magrittr) # for %>%
?aggregate()
crime[order(-crime$DaysToReport),c('year','DaysToReport')]%>%head(20)
## ----aggregate, eval=TRUE------------------------------------------------
# non missing 'precint'
crime=crime[complete.cases(crime$Precinct),]
# summary: mean by groups
aggregate(data=crime, DaysToReport~Precinct,mean)
View(crime)
head(crime$DaysToReport)
head(crime$Precinct)
base=ggplot(data=crime,
aes(x=Precinct,y=DaysToReport))
base + geom_boxplot()
summary(crime$DaysToReport)
aggregate(data=crime,DaysToReport~Precinct,summary)
library(ggpubr)
base7=ggplot(data=crime[crime$DaysToReport>=7,],
aes(x=Precinct,y=DaysToReport))
box7=base7 + geom_boxplot() + labs(title = "week and above")
base30=ggplot(data=crime[crime$DaysToReport>=30,],
aes(x=Precinct,y=DaysToReport))
box30=base30 + geom_boxplot() + labs(title = "month and above")
base180=ggplot(data=crime[crime$DaysToReport>=180,],
aes(x=Precinct,y=DaysToReport))
box180=base180 + geom_boxplot() + labs(title = "half year and above")
base365=ggplot(data=crime[crime$DaysToReport>=360,],
aes(x=Precinct,y=DaysToReport))
box365=base365 + geom_boxplot() + labs(title = "year and above")
box365
#all in one:
ggarrange(box7,box30,box180,box365)
aggregate(data=crime,DaysToReport~Precinct,summary)
aggregate(data=crime,DaysToReport~Precinct,summary)
#all in one:
ggarrange(box7,box30,box180,box365)
final_data <- read.csv("Final Data - Sheet1.csv")
getwd()
setwd("Desktop/Github/PUBPOL543/")
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol %<>% as.data.frame() %>%
rename("Country"= Var1) %>%
rename("incomeStatus" = Var2)
ggplot(data_mgCol, aes(Country, Freq)) +
geom_bar(stat = "Identity", fill=  "#3CA3B2") +
facet_grid(~ incomeStatus) +
coord_flip() +
theme_stata() +
theme(axis.text.y = element_text(angle = 45)) +
ggtitle("Income Distribution by Continent") +
xlab("Continent") +
ylab("Frequency")
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol %<>% as.data.frame() %>%
rename("Country"= Var1) %>%
rename("incomeStatus" = Var2)
View(final_data)
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol
ggplot(data_mgCol, aes(Country, Freq)) +
geom_bar(stat = "Identity", fill=  "#3CA3B2") +
facet_grid(~ incomeStatus) +
coord_flip() +
theme_stata() +
theme(axis.text.y = element_text(angle = 45)) +
ggtitle("Income Distribution by Continent") +
xlab("Continent") +
ylab("Frequency")
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol
data_mgCol %<>% as.data.frame()
data_mgCol
data_mgCol %<>% as.data.frame() %>%
rename("Country"= Var1) %>%
rename("incomeStatus" = Var2)
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol %<>% as.data.frame() %>%
rename("Continent"= Var1) %>%
rename("incomeStatus" = Var2)
data_mgCol%>%
rename("Continent"= Var1) %>%
rename("incomeStatus" = Var2)
data_mgCol
data_mgCol %<>% as.data.frame()
data_mgCol
data_mgCol%>%
rename("Continent"= Var1) %>%
rename("incomeStatus" = Var2)
library(dplyr)
data_mgCol%>%
rename("Continent"= Var1) %>%
rename("incomeStatus" = Var2)
final_data <- read.csv("Final Data - Sheet1.csv")
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
data_mgCol %<>% as.data.frame() %>%
rename("Continent"= Var1) %>%
rename("incomeStatus" = Var2)
ggplot(data_mgCol, aes(Country, Freq)) +
geom_bar(stat = "Identity", fill=  "#3CA3B2") +
facet_grid(~ incomeStatus) +
coord_flip() +
theme_stata() +
theme(axis.text.y = element_text(angle = 45)) +
ggtitle("Income Distribution by Continent") +
xlab("Continent") +
ylab("Frequency")
library(ggplot)
library(magrittr)
library(tidyr)
#boxplot by Year
base=ggplot(data = crimeY2000,
aes(x=as.factor(year),
y=YearsToReport))
boxByYear=base + geom_boxplot()
#boxplot by Crime
base=ggplot(data =crimeY2000,
aes(x=reorder(crimecat,YearsToReport), # using reorder!
y=YearsToReport))
boxByCrime=base + geom_boxplot()
boxByCrime= boxByCrime + theme(axis.text.x = element_text(angle = 45,
hjust = 1,
size = 5))
# combining plots
ggarrange(boxByYear,boxByCrime,ncol = 1)
?reorder()
# combining plots
ggarrange(boxByYear,boxByCrime,ncol = 1)
## ----boxBYE, eval=TRUE---------------------------------------------------
# plotting the MIN values:
base  = ggplot(crimeY2000,aes(x=factor(year), y=YearsToReport))
mins = base + stat_summary(fun.y=min, # function for 'y' is min()
geom="line",
size=2,
aes(group=1,col='Min'))
mins # just the min values
## ---- eval=TRUE----------------------------------------------------------
# plotting the MAX values on top:
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",
size=2,
aes(group=1,col='Max'))
minsMaxs
## ---- eval=TRUE----------------------------------------------------------
# another layer with MEDIANS
minsMaxsMd= minsMaxs + stat_summary(fun.y=median,
geom="line",
size=2,
aes(group=1,col='Median'))
minsMaxsMd
## ---- eval=TRUE----------------------------------------------------------
# Change color of lines:
all1=minsMaxsMd + scale_colour_manual(name="Stats",
values=c("black", "grey50","grey90") #alphabetic
)
all1 + theme_classic()
crimeLessYear2000=crime[(crime$DaysToReport<365) & (crime$year>=2000),]
## ----plotCrimeWeek, eval=TRUE--------------------------------------------
#plotting it as before:
base = ggplot(crimeLessYear2000,aes(x=factor(year), y=DaysToReport))
mins = base + stat_summary(fun.y=min,size=2,
geom="line",
aes(group=1,col='Min'))
minsMaxs= mins + stat_summary(fun.y=max,
geom="line",size=2,
aes(group=1,col='Max'))
minsMaxsMd= minsMaxs + stat_summary(fun.y=median,
geom="line",size=2,
aes(group=1,col='Median'))
all2=minsMaxsMd + scale_colour_manual(name="Stats",
values=c("black", "grey50","grey90")
)
all2 + theme_classic()
## ---- eval=TRUE----------------------------------------------------------
# Change color of lines:
all1=minsMaxsMd + scale_colour_manual(name="Stats",
values=c("black", "grey50","grey90") #alphabetic
)
all1 + theme_classic()
#are crime in precints different on average?
library(Rmisc)
group.CI(YearsToReport ~ Precinct,
data=crimeY2000,
ci = 0.95)
## ----testAnova, eval=TRUE------------------------------------------------
# Compute the analysis of variance
res.aov <- aov(YearsToReport ~ Precinct, data = crimeY2000)
# Summary of the analysis
summary(res.aov)
ggline(data=crimeY2000,x = "Precinct", y = "YearsToReport",
add = 'mean_ci')
## ----Tukey, eval=TRUE----------------------------------------------------
# where are the differences detected in aov?
TukeyHSD(res.aov)
## ----Tukey, eval=TRUE----------------------------------------------------
# where are the differences detected in aov?
TukeyHSD(res.aov)
## ----kruskal, eval=TRUE--------------------------------------------------
# non parametric
kruskal.test(YearsToReport ~ Precinct, data = crimeY2000)
## ----dunn, eval=TRUE-----------------------------------------------------
# where are the differences detected in Kruskal?
library(FSA)
dunnTest(YearsToReport ~ Precinct, data = crimeY2000)
## ----dunnFiltered, eval=TRUE---------------------------------------------
# where are the differences detected in Kruskal?
# result into a data frame
ResNonPar=dunnTest(YearsToReport ~ Precinct, data = crimeY2000)$res
ResNonPar[ResNonPar$P.adj<0.05,]
final_data <- read.csv("Final Data - Sheet1.csv")
library(ggplot)
library(magrittr)
library(tidyr)
data <- table(final_data$Continent, final_data$Income.Group)
data_mgCol <- prop.table(data,margin = 2)
View(final_data)
access_Renewable <- read.csv("access_Renewable.csv", check.names = FALSE)
renewable_consumption <- read.csv("renewable_Consumption.csv",  check.names = FALSE)
arable_Land <- read.csv("Arable_Land.csv",  check.names = FALSE)
View(access_Renewable)
access_Renewable <- read.csv("access_Renewable.csv", check.names = FALSE)
renewable_consumption <- read.csv("renewable_Consumption.csv",  check.names = FALSE)
arable_Land <- read.csv("Arable_Land.csv",  check.names = FALSE)
View(access_Renewable)
access_Renewable <- read.csv("access_Renewable.csv", check.names = FALSE)
View(access_Renewable)
colnames(access_Renewable)
access_Renewable$2015
access_Renewable$`2015``
access_Renewable$`2015`
